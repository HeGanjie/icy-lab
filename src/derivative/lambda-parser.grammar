Derivative
 	=  "(" _ "{" _  varNames:Params _ "}"  _  ", " _ "{" _ placeholders:Params _ "}"    _ ")" _ "=>" _  ast:Expression _ {
         return {varNames, placeholders, ast}
      }
      / "(" _ "{" _  varNames:Params _ "}" _ ")" _ "=>" _  ast:Expression _ {
         return {varNames, ast}
      }
      / varName: Variable _ "=>" _  ast:Expression _ {
         return {varName, ast}
      }

Params
  = headVar:Variable tailVars: (_ "," _ Variable)* {
    return [headVar, ...tailVars.map(arr => arr[3])]
  }

Expression
  = head:Term tail:(_ ("+" / "-") _ Term)* {
       return tail.reduce((acc, curr) => {
         let op = curr[1], right = curr[3]
         return {op, left: acc, right}
  	   }, head)
  }
  / "{" _ params: Params  _ "}" {
    return {op: "wrap", left: params}
  }

Term
  = head:Unary tail:(_ ("*" / "/") _ Unary)* {
  	return tail.reduce((acc, curr) => {
      let op = curr[1], right = curr[3]
      return {op, left: acc, right}
  	}, head)
  }

Unary
  = neg:"-"? factor: Factor {
    return neg ? {op: "neg", left: factor } : factor
  }

Factor
  = Number
  / _  funcName:Variable "(" _ left:Expression _ "," _ right:Expression _ ")" { return {op: funcName, left, right} }
  / _  funcName:Variable "(" _ left:Expression _")" { return {op: funcName, left} }
  / Variable
  / _"(" _ expr:Expression _ ")" { return expr; }


Variable
  = _ [a-zA-Z_] [a-zA-Z0-9]* { return text() }

Number "number"
  = _ "-"? ([0-9]+".")?[0-9]+ { return +text() }

_ "whitespace"
  = [ \t\n\r]* { return "" }
